# coding: utf-8

"""
    Voyager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v6.0.0
    Contact: hello@appscode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1CertificateStorage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secret': 'IoK8sApiCoreV1LocalObjectReference',
        'vault': 'V1beta1VaultStore'
    }

    attribute_map = {
        'secret': 'secret',
        'vault': 'vault'
    }

    def __init__(self, secret=None, vault=None):
        """
        V1beta1CertificateStorage - a model defined in Swagger
        """

        self._secret = None
        self._vault = None
        self.discriminator = None

        if secret is not None:
          self.secret = secret
        if vault is not None:
          self.vault = vault

    @property
    def secret(self):
        """
        Gets the secret of this V1beta1CertificateStorage.

        :return: The secret of this V1beta1CertificateStorage.
        :rtype: IoK8sApiCoreV1LocalObjectReference
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """
        Sets the secret of this V1beta1CertificateStorage.

        :param secret: The secret of this V1beta1CertificateStorage.
        :type: IoK8sApiCoreV1LocalObjectReference
        """

        self._secret = secret

    @property
    def vault(self):
        """
        Gets the vault of this V1beta1CertificateStorage.

        :return: The vault of this V1beta1CertificateStorage.
        :rtype: V1beta1VaultStore
        """
        return self._vault

    @vault.setter
    def vault(self, vault):
        """
        Sets the vault of this V1beta1CertificateStorage.

        :param vault: The vault of this V1beta1CertificateStorage.
        :type: V1beta1VaultStore
        """

        self._vault = vault

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1CertificateStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
