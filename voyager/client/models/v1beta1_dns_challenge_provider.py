# coding: utf-8

"""
    Voyager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v6.0.0
    Contact: hello@appscode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1DNSChallengeProvider(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_secret_name': 'str',
        'provider': 'str'
    }

    attribute_map = {
        'credential_secret_name': 'credentialSecretName',
        'provider': 'provider'
    }

    def __init__(self, credential_secret_name=None, provider=None):
        """
        V1beta1DNSChallengeProvider - a model defined in Swagger
        """

        self._credential_secret_name = None
        self._provider = None
        self.discriminator = None

        if credential_secret_name is not None:
          self.credential_secret_name = credential_secret_name
        if provider is not None:
          self.provider = provider

    @property
    def credential_secret_name(self):
        """
        Gets the credential_secret_name of this V1beta1DNSChallengeProvider.

        :return: The credential_secret_name of this V1beta1DNSChallengeProvider.
        :rtype: str
        """
        return self._credential_secret_name

    @credential_secret_name.setter
    def credential_secret_name(self, credential_secret_name):
        """
        Sets the credential_secret_name of this V1beta1DNSChallengeProvider.

        :param credential_secret_name: The credential_secret_name of this V1beta1DNSChallengeProvider.
        :type: str
        """

        self._credential_secret_name = credential_secret_name

    @property
    def provider(self):
        """
        Gets the provider of this V1beta1DNSChallengeProvider.
        DNS Provider from the list https://github.com/appscode/voyager/blob/master/docs/tasks/certificate/providers.md

        :return: The provider of this V1beta1DNSChallengeProvider.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this V1beta1DNSChallengeProvider.
        DNS Provider from the list https://github.com/appscode/voyager/blob/master/docs/tasks/certificate/providers.md

        :param provider: The provider of this V1beta1DNSChallengeProvider.
        :type: str
        """

        self._provider = provider

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1DNSChallengeProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
