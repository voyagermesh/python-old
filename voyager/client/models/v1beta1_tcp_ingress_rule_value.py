# coding: utf-8

"""
    Voyager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v6.0.0
    Contact: hello@appscode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1TCPIngressRuleValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'alpn': 'list[str]',
        'backend': 'V1beta1IngressBackend',
        'no_tls': 'bool',
        'node_port': 'str',
        'port': 'str'
    }

    attribute_map = {
        'address': 'address',
        'alpn': 'alpn',
        'backend': 'backend',
        'no_tls': 'noTLS',
        'node_port': 'nodePort',
        'port': 'port'
    }

    def __init__(self, address=None, alpn=None, backend=None, no_tls=None, node_port=None, port=None):
        """
        V1beta1TCPIngressRuleValue - a model defined in Swagger
        """

        self._address = None
        self._alpn = None
        self._backend = None
        self._no_tls = None
        self._node_port = None
        self._port = None
        self.discriminator = None

        if address is not None:
          self.address = address
        if alpn is not None:
          self.alpn = alpn
        if backend is not None:
          self.backend = backend
        if no_tls is not None:
          self.no_tls = no_tls
        if node_port is not None:
          self.node_port = node_port
        if port is not None:
          self.port = port

    @property
    def address(self):
        """
        Gets the address of this V1beta1TCPIngressRuleValue.
        The network address to listen TCP connections on.

        :return: The address of this V1beta1TCPIngressRuleValue.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this V1beta1TCPIngressRuleValue.
        The network address to listen TCP connections on.

        :param address: The address of this V1beta1TCPIngressRuleValue.
        :type: str
        """

        self._address = address

    @property
    def alpn(self):
        """
        Gets the alpn of this V1beta1TCPIngressRuleValue.
        Application-Layer Protocol Negotiation (ALPN) is a Transport Layer Security (TLS) extension for application layer protocol negotiation. ALPN allows the application layer to negotiate which protocol should be performed over a secure connection in a manner which avoids additional round trips and which is independent of the application layer protocols. It is used by HTTP/2. If provided a list of alpn will be added to port as alpn option1,option2,... If SecretName is Provided this secret will be used to terminate SSL with alpn options. If Secret name is not provided backend server is responsible for handling SSL.

        :return: The alpn of this V1beta1TCPIngressRuleValue.
        :rtype: list[str]
        """
        return self._alpn

    @alpn.setter
    def alpn(self, alpn):
        """
        Sets the alpn of this V1beta1TCPIngressRuleValue.
        Application-Layer Protocol Negotiation (ALPN) is a Transport Layer Security (TLS) extension for application layer protocol negotiation. ALPN allows the application layer to negotiate which protocol should be performed over a secure connection in a manner which avoids additional round trips and which is independent of the application layer protocols. It is used by HTTP/2. If provided a list of alpn will be added to port as alpn option1,option2,... If SecretName is Provided this secret will be used to terminate SSL with alpn options. If Secret name is not provided backend server is responsible for handling SSL.

        :param alpn: The alpn of this V1beta1TCPIngressRuleValue.
        :type: list[str]
        """

        self._alpn = alpn

    @property
    def backend(self):
        """
        Gets the backend of this V1beta1TCPIngressRuleValue.
        Backend to forward the requests.

        :return: The backend of this V1beta1TCPIngressRuleValue.
        :rtype: V1beta1IngressBackend
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """
        Sets the backend of this V1beta1TCPIngressRuleValue.
        Backend to forward the requests.

        :param backend: The backend of this V1beta1TCPIngressRuleValue.
        :type: V1beta1IngressBackend
        """

        self._backend = backend

    @property
    def no_tls(self):
        """
        Gets the no_tls of this V1beta1TCPIngressRuleValue.
        Set noTLS = true to force plain text. Else, auto detect like present

        :return: The no_tls of this V1beta1TCPIngressRuleValue.
        :rtype: bool
        """
        return self._no_tls

    @no_tls.setter
    def no_tls(self, no_tls):
        """
        Sets the no_tls of this V1beta1TCPIngressRuleValue.
        Set noTLS = true to force plain text. Else, auto detect like present

        :param no_tls: The no_tls of this V1beta1TCPIngressRuleValue.
        :type: bool
        """

        self._no_tls = no_tls

    @property
    def node_port(self):
        """
        Gets the node_port of this V1beta1TCPIngressRuleValue.
        Specifies the node port of the referenced service.

        :return: The node_port of this V1beta1TCPIngressRuleValue.
        :rtype: str
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """
        Sets the node_port of this V1beta1TCPIngressRuleValue.
        Specifies the node port of the referenced service.

        :param node_port: The node_port of this V1beta1TCPIngressRuleValue.
        :type: str
        """

        self._node_port = node_port

    @property
    def port(self):
        """
        Gets the port of this V1beta1TCPIngressRuleValue.
        port to listen tcp connections.

        :return: The port of this V1beta1TCPIngressRuleValue.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this V1beta1TCPIngressRuleValue.
        port to listen tcp connections.

        :param port: The port of this V1beta1TCPIngressRuleValue.
        :type: str
        """

        self._port = port

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1TCPIngressRuleValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
