# coding: utf-8

"""
    Voyager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v6.0.0
    Contact: hello@appscode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1IngressSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affinity': 'IoK8sApiCoreV1Affinity',
        'backend': 'V1beta1HTTPIngressBackend',
        'external_i_ps': 'list[str]',
        'frontend_rules': 'list[V1beta1FrontendRule]',
        'image_pull_secrets': 'list[IoK8sApiCoreV1LocalObjectReference]',
        'load_balancer_source_ranges': 'list[str]',
        'node_selector': 'dict(str, str)',
        'resources': 'IoK8sApiCoreV1ResourceRequirements',
        'rules': 'list[V1beta1IngressRule]',
        'scheduler_name': 'str',
        'tls': 'list[V1beta1IngressTLS]',
        'tolerations': 'list[IoK8sApiCoreV1Toleration]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'backend': 'backend',
        'external_i_ps': 'externalIPs',
        'frontend_rules': 'frontendRules',
        'image_pull_secrets': 'imagePullSecrets',
        'load_balancer_source_ranges': 'loadBalancerSourceRanges',
        'node_selector': 'nodeSelector',
        'resources': 'resources',
        'rules': 'rules',
        'scheduler_name': 'schedulerName',
        'tls': 'tls',
        'tolerations': 'tolerations'
    }

    def __init__(self, affinity=None, backend=None, external_i_ps=None, frontend_rules=None, image_pull_secrets=None, load_balancer_source_ranges=None, node_selector=None, resources=None, rules=None, scheduler_name=None, tls=None, tolerations=None):
        """
        V1beta1IngressSpec - a model defined in Swagger
        """

        self._affinity = None
        self._backend = None
        self._external_i_ps = None
        self._frontend_rules = None
        self._image_pull_secrets = None
        self._load_balancer_source_ranges = None
        self._node_selector = None
        self._resources = None
        self._rules = None
        self._scheduler_name = None
        self._tls = None
        self._tolerations = None
        self.discriminator = None

        if affinity is not None:
          self.affinity = affinity
        if backend is not None:
          self.backend = backend
        if external_i_ps is not None:
          self.external_i_ps = external_i_ps
        if frontend_rules is not None:
          self.frontend_rules = frontend_rules
        if image_pull_secrets is not None:
          self.image_pull_secrets = image_pull_secrets
        if load_balancer_source_ranges is not None:
          self.load_balancer_source_ranges = load_balancer_source_ranges
        if node_selector is not None:
          self.node_selector = node_selector
        if resources is not None:
          self.resources = resources
        if rules is not None:
          self.rules = rules
        if scheduler_name is not None:
          self.scheduler_name = scheduler_name
        if tls is not None:
          self.tls = tls
        if tolerations is not None:
          self.tolerations = tolerations

    @property
    def affinity(self):
        """
        Gets the affinity of this V1beta1IngressSpec.
        If specified, the pod's scheduling constraints

        :return: The affinity of this V1beta1IngressSpec.
        :rtype: IoK8sApiCoreV1Affinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """
        Sets the affinity of this V1beta1IngressSpec.
        If specified, the pod's scheduling constraints

        :param affinity: The affinity of this V1beta1IngressSpec.
        :type: IoK8sApiCoreV1Affinity
        """

        self._affinity = affinity

    @property
    def backend(self):
        """
        Gets the backend of this V1beta1IngressSpec.
        A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.

        :return: The backend of this V1beta1IngressSpec.
        :rtype: V1beta1HTTPIngressBackend
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """
        Sets the backend of this V1beta1IngressSpec.
        A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.

        :param backend: The backend of this V1beta1IngressSpec.
        :type: V1beta1HTTPIngressBackend
        """

        self._backend = backend

    @property
    def external_i_ps(self):
        """
        Gets the external_i_ps of this V1beta1IngressSpec.
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.

        :return: The external_i_ps of this V1beta1IngressSpec.
        :rtype: list[str]
        """
        return self._external_i_ps

    @external_i_ps.setter
    def external_i_ps(self, external_i_ps):
        """
        Sets the external_i_ps of this V1beta1IngressSpec.
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.

        :param external_i_ps: The external_i_ps of this V1beta1IngressSpec.
        :type: list[str]
        """

        self._external_i_ps = external_i_ps

    @property
    def frontend_rules(self):
        """
        Gets the frontend_rules of this V1beta1IngressSpec.
        Frontend rules specifies a set of rules that should be applied in HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1 Only frontend sections can be applied here. It is up to user to provide valid set of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped with Ingress Rules according to port.

        :return: The frontend_rules of this V1beta1IngressSpec.
        :rtype: list[V1beta1FrontendRule]
        """
        return self._frontend_rules

    @frontend_rules.setter
    def frontend_rules(self, frontend_rules):
        """
        Sets the frontend_rules of this V1beta1IngressSpec.
        Frontend rules specifies a set of rules that should be applied in HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1 Only frontend sections can be applied here. It is up to user to provide valid set of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped with Ingress Rules according to port.

        :param frontend_rules: The frontend_rules of this V1beta1IngressSpec.
        :type: list[V1beta1FrontendRule]
        """

        self._frontend_rules = frontend_rules

    @property
    def image_pull_secrets(self):
        """
        Gets the image_pull_secrets of this V1beta1IngressSpec.
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod

        :return: The image_pull_secrets of this V1beta1IngressSpec.
        :rtype: list[IoK8sApiCoreV1LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """
        Sets the image_pull_secrets of this V1beta1IngressSpec.
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod

        :param image_pull_secrets: The image_pull_secrets of this V1beta1IngressSpec.
        :type: list[IoK8sApiCoreV1LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def load_balancer_source_ranges(self):
        """
        Gets the load_balancer_source_ranges of this V1beta1IngressSpec.
        Optional: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature. https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/

        :return: The load_balancer_source_ranges of this V1beta1IngressSpec.
        :rtype: list[str]
        """
        return self._load_balancer_source_ranges

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, load_balancer_source_ranges):
        """
        Sets the load_balancer_source_ranges of this V1beta1IngressSpec.
        Optional: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature. https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/

        :param load_balancer_source_ranges: The load_balancer_source_ranges of this V1beta1IngressSpec.
        :type: list[str]
        """

        self._load_balancer_source_ranges = load_balancer_source_ranges

    @property
    def node_selector(self):
        """
        Gets the node_selector of this V1beta1IngressSpec.
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

        :return: The node_selector of this V1beta1IngressSpec.
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """
        Sets the node_selector of this V1beta1IngressSpec.
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

        :param node_selector: The node_selector of this V1beta1IngressSpec.
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def resources(self):
        """
        Gets the resources of this V1beta1IngressSpec.
        Compute Resources required by the sidecar container.

        :return: The resources of this V1beta1IngressSpec.
        :rtype: IoK8sApiCoreV1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this V1beta1IngressSpec.
        Compute Resources required by the sidecar container.

        :param resources: The resources of this V1beta1IngressSpec.
        :type: IoK8sApiCoreV1ResourceRequirements
        """

        self._resources = resources

    @property
    def rules(self):
        """
        Gets the rules of this V1beta1IngressSpec.
        A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.

        :return: The rules of this V1beta1IngressSpec.
        :rtype: list[V1beta1IngressRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this V1beta1IngressSpec.
        A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.

        :param rules: The rules of this V1beta1IngressSpec.
        :type: list[V1beta1IngressRule]
        """

        self._rules = rules

    @property
    def scheduler_name(self):
        """
        Gets the scheduler_name of this V1beta1IngressSpec.
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.

        :return: The scheduler_name of this V1beta1IngressSpec.
        :rtype: str
        """
        return self._scheduler_name

    @scheduler_name.setter
    def scheduler_name(self, scheduler_name):
        """
        Sets the scheduler_name of this V1beta1IngressSpec.
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.

        :param scheduler_name: The scheduler_name of this V1beta1IngressSpec.
        :type: str
        """

        self._scheduler_name = scheduler_name

    @property
    def tls(self):
        """
        Gets the tls of this V1beta1IngressSpec.
        TLS is the TLS configuration. Currently the Ingress only supports a single TLS port, 443, and assumes TLS termination. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension.

        :return: The tls of this V1beta1IngressSpec.
        :rtype: list[V1beta1IngressTLS]
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """
        Sets the tls of this V1beta1IngressSpec.
        TLS is the TLS configuration. Currently the Ingress only supports a single TLS port, 443, and assumes TLS termination. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension.

        :param tls: The tls of this V1beta1IngressSpec.
        :type: list[V1beta1IngressTLS]
        """

        self._tls = tls

    @property
    def tolerations(self):
        """
        Gets the tolerations of this V1beta1IngressSpec.
        If specified, the pod's tolerations.

        :return: The tolerations of this V1beta1IngressSpec.
        :rtype: list[IoK8sApiCoreV1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """
        Sets the tolerations of this V1beta1IngressSpec.
        If specified, the pod's tolerations.

        :param tolerations: The tolerations of this V1beta1IngressSpec.
        :type: list[IoK8sApiCoreV1Toleration]
        """

        self._tolerations = tolerations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1IngressSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
