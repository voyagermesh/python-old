# coding: utf-8

"""
    Voyager

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v6.0.0
    Contact: hello@appscode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1HTTPIngressRuleValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'no_tls': 'bool',
        'node_port': 'str',
        'paths': 'list[V1beta1HTTPIngressPath]',
        'port': 'str'
    }

    attribute_map = {
        'address': 'address',
        'no_tls': 'noTLS',
        'node_port': 'nodePort',
        'paths': 'paths',
        'port': 'port'
    }

    def __init__(self, address=None, no_tls=None, node_port=None, paths=None, port=None):
        """
        V1beta1HTTPIngressRuleValue - a model defined in Swagger
        """

        self._address = None
        self._no_tls = None
        self._node_port = None
        self._paths = None
        self._port = None
        self.discriminator = None

        if address is not None:
          self.address = address
        if no_tls is not None:
          self.no_tls = no_tls
        if node_port is not None:
          self.node_port = node_port
        self.paths = paths
        if port is not None:
          self.port = port

    @property
    def address(self):
        """
        Gets the address of this V1beta1HTTPIngressRuleValue.
        The network address to listen HTTP(s) connections on.

        :return: The address of this V1beta1HTTPIngressRuleValue.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this V1beta1HTTPIngressRuleValue.
        The network address to listen HTTP(s) connections on.

        :param address: The address of this V1beta1HTTPIngressRuleValue.
        :type: str
        """

        self._address = address

    @property
    def no_tls(self):
        """
        Gets the no_tls of this V1beta1HTTPIngressRuleValue.
        Set noTLS = true to force plain text. Else, auto detect like present

        :return: The no_tls of this V1beta1HTTPIngressRuleValue.
        :rtype: bool
        """
        return self._no_tls

    @no_tls.setter
    def no_tls(self, no_tls):
        """
        Sets the no_tls of this V1beta1HTTPIngressRuleValue.
        Set noTLS = true to force plain text. Else, auto detect like present

        :param no_tls: The no_tls of this V1beta1HTTPIngressRuleValue.
        :type: bool
        """

        self._no_tls = no_tls

    @property
    def node_port(self):
        """
        Gets the node_port of this V1beta1HTTPIngressRuleValue.
        Specifies the node port of the referenced service.

        :return: The node_port of this V1beta1HTTPIngressRuleValue.
        :rtype: str
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """
        Sets the node_port of this V1beta1HTTPIngressRuleValue.
        Specifies the node port of the referenced service.

        :param node_port: The node_port of this V1beta1HTTPIngressRuleValue.
        :type: str
        """

        self._node_port = node_port

    @property
    def paths(self):
        """
        Gets the paths of this V1beta1HTTPIngressRuleValue.
        A collection of paths that map requests to backends.

        :return: The paths of this V1beta1HTTPIngressRuleValue.
        :rtype: list[V1beta1HTTPIngressPath]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """
        Sets the paths of this V1beta1HTTPIngressRuleValue.
        A collection of paths that map requests to backends.

        :param paths: The paths of this V1beta1HTTPIngressRuleValue.
        :type: list[V1beta1HTTPIngressPath]
        """
        if paths is None:
            raise ValueError("Invalid value for `paths`, must not be `None`")

        self._paths = paths

    @property
    def port(self):
        """
        Gets the port of this V1beta1HTTPIngressRuleValue.
        port to listen http(s) connections.

        :return: The port of this V1beta1HTTPIngressRuleValue.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this V1beta1HTTPIngressRuleValue.
        port to listen http(s) connections.

        :param port: The port of this V1beta1HTTPIngressRuleValue.
        :type: str
        """

        self._port = port

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1HTTPIngressRuleValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
